// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/tokenauth/test.proto

package tokenauth

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
	Resource int64 `protobuf:"varint,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_b1dc3f98f52fa73b, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

type GetResponse struct {
	NumSuccessfulAuth int64 `protobuf:"varint,1,opt,name=num_successful_auth,json=numSuccessfulAuthN,proto3" json:"num_successful_auth,omitempty"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_b1dc3f98f52fa73b, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(dst, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetRequest)(nil), "cockroach.pkg.cmd.tokenauth.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "cockroach.pkg.cmd.tokenauth.GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MockKVClient is the client API for MockKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockKVClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type mockKVClient struct {
	cc *grpc.ClientConn
}

func NewMockKVClient(cc *grpc.ClientConn) MockKVClient {
	return &mockKVClient{cc}
}

func (c *mockKVClient) Get(
	ctx context.Context, in *GetRequest, opts ...grpc.CallOption,
) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/cockroach.pkg.cmd.tokenauth.MockKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockKVServer is the server API for MockKV service.
type MockKVServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterMockKVServer(s *grpc.Server, srv MockKVServer) {
	s.RegisterService(&_MockKV_serviceDesc, srv)
}

func _MockKV_Get_Handler(
	srv interface{},
	ctx context.Context,
	dec func(interface{}) error,
	interceptor grpc.UnaryServerInterceptor,
) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.pkg.cmd.tokenauth.MockKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.pkg.cmd.tokenauth.MockKV",
	HandlerType: (*MockKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MockKV_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/tokenauth/test.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resource != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Resource))
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumSuccessfulAuth != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.NumSuccessfulAuth))
	}
	return i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != 0 {
		n += 1 + sovTest(uint64(m.Resource))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumSuccessfulAuth != 0 {
		n += 1 + sovTest(uint64(m.NumSuccessfulAuth))
	}
	return n
}

func sovTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			m.Resource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resource |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSuccessfulAuth", wireType)
			}
			m.NumSuccessfulAuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSuccessfulAuth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cmd/tokenauth/test.proto", fileDescriptor_test_b1dc3f98f52fa73b) }

var fileDescriptor_test_b1dc3f98f52fa73b = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x15, 0x55, 0xc8, 0x4c, 0x04, 0x86, 0x2a, 0x20, 0x0b, 0x65, 0x80, 0x4c, 0x8e,
	0x04, 0x33, 0x03, 0x2c, 0x1d, 0x10, 0x4b, 0x91, 0x18, 0xba, 0x54, 0xc6, 0x39, 0x92, 0x28, 0xb5,
	0x2f, 0xc4, 0xe7, 0xf7, 0xe0, 0xb1, 0x3a, 0x76, 0xec, 0x08, 0xc9, 0x8b, 0xa0, 0x26, 0x28, 0x6c,
	0x74, 0xbb, 0xd3, 0xff, 0xfd, 0xd2, 0xf7, 0xf3, 0x99, 0x36, 0x59, 0x4a, 0x58, 0x81, 0x55, 0x9e,
	0x8a, 0x94, 0xc0, 0x91, 0xac, 0x1b, 0x24, 0x0c, 0x2f, 0x34, 0xea, 0xaa, 0x41, 0xa5, 0x0b, 0x59,
	0x57, 0xb9, 0xd4, 0x26, 0x93, 0x23, 0x17, 0x9d, 0xe7, 0x98, 0x63, 0xcf, 0xa5, 0xfb, 0x6b, 0xa8,
	0x44, 0x97, 0x39, 0x62, 0xbe, 0x86, 0x54, 0xd5, 0x65, 0xaa, 0xac, 0x45, 0x52, 0x54, 0xa2, 0x75,
	0x43, 0x1a, 0x27, 0x9c, 0xcf, 0x81, 0x16, 0xf0, 0xe1, 0xc1, 0x51, 0x18, 0xf1, 0xe3, 0x06, 0x1c,
	0xfa, 0x46, 0xc3, 0x8c, 0x5d, 0xb1, 0x64, 0xb2, 0x18, 0xff, 0xf8, 0x9e, 0x9f, 0xf4, 0xa4, 0xab,
	0xd1, 0x3a, 0x08, 0x25, 0x3f, 0xb3, 0xde, 0xac, 0x9c, 0xd7, 0x1a, 0x9c, 0x7b, 0xf7, 0xeb, 0xd5,
	0xde, 0xe1, 0xb7, 0x75, 0x6a, 0xbd, 0x79, 0x19, 0x93, 0x07, 0x4f, 0xc5, 0x6d, 0xc6, 0xa7, 0xcf,
	0xa8, 0xab, 0xa7, 0xd7, 0x70, 0xc9, 0x27, 0x73, 0xa0, 0xf0, 0x46, 0xfe, 0xb3, 0x45, 0xfe, 0x49,
	0x45, 0xc9, 0x61, 0x70, 0x70, 0x8a, 0x83, 0xc7, 0xeb, 0xcd, 0xb7, 0x08, 0x36, 0xad, 0x60, 0xdb,
	0x56, 0xb0, 0x5d, 0x2b, 0xd8, 0x57, 0x2b, 0xd8, 0x67, 0x27, 0x82, 0x6d, 0x27, 0x82, 0x5d, 0x27,
	0x82, 0xe5, 0x91, 0x51, 0xa5, 0x7d, 0x9b, 0xf6, 0xeb, 0xef, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x49, 0xb9, 0x25, 0x57, 0x6a, 0x01, 0x00, 0x00,
}
