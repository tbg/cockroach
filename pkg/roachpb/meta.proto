// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.roachpb;
option go_package = "roachpb";

import "roachpb/errors.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Event {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Duration duration = 2;
  oneof event {
    ContentionEvent contention = 4;
    // NB: we'll need a contract on BatchResponse when errors are
    // added to the events. It seems silly to do it while the
    // response still contains the embedded error.
    Error error = 5;
    // Same for this one actually. This one sits directly on the
    // response as well for perf reasons.
    RangeExecEvent lifecycle = 5;
  }
}

// These would live in a kv-specific package

message ContentionEvent {
  bytes key = 1 [(gogoproto.customtype) = "Key"];
  bool pushee_aborted = 3; // did pushee commit or abort?
  // TODO more to come
}

message RangeExecEvent {
  int64 sequenced = 2; // past latch mgr
  int64 proposed = 3; // put into raft
  int64 applied = 4; // response from raft = end of processing
}

message Meta {
  RequestLifecycleEvent lifecycle = 1 [(gogoproto.embed) = true];
  repeated Event aux_events = 3 [(gogoproto.nullable) = false];
}
